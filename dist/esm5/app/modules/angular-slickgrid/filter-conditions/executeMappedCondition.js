/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { booleanFilterCondition } from './booleanFilterCondition';
import { dateFilterCondition } from './dateFilterCondition';
import { dateIsoFilterCondition } from './dateIsoFilterCondition';
import { dateUsShortFilterCondition } from './dateUsShortFilterCondition';
import { dateUsFilterCondition } from './dateUsFilterCondition';
import { dateUtcFilterCondition } from './dateUtcFilterCondition';
import { collectionSearchFilterCondition } from './collectionSearchFilterCondition';
import { numberFilterCondition } from './numberFilterCondition';
import { stringFilterCondition } from './stringFilterCondition';
import { FieldType } from '../models/index';
/** @type {?} */
export var executeMappedCondition = function (options) {
    // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search
    /** @type {?} */
    var operator = options.operator && options.operator.toUpperCase();
    if (options && options.operator && (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS')) {
        return collectionSearchFilterCondition(options);
    }
    // execute the mapped type, or default to String condition check
    switch (options.fieldType) {
        case FieldType.boolean:
            return booleanFilterCondition(options);
        case FieldType.date:
            return dateFilterCondition(options);
        case FieldType.dateUtc:
            return dateUtcFilterCondition(options);
        case FieldType.dateIso:
            return dateIsoFilterCondition(options);
        case FieldType.dateUs:
        case FieldType.dateTimeUs:
            return dateUsFilterCondition(options);
        case FieldType.dateUsShort:
        case FieldType.dateTimeUsShort:
            return dateUsShortFilterCondition(options);
        case FieldType.number:
            return numberFilterCondition(options);
        case FieldType.string:
        default:
            return stringFilterCondition(options);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZU1hcHBlZENvbmRpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZmlsdGVyLWNvbmRpdGlvbnMvZXhlY3V0ZU1hcHBlZENvbmRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHbEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDcEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUU1QyxNQUFNLEtBQU8sc0JBQXNCLEdBQW9CLFVBQUMsT0FBOEI7OztRQUU5RSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtJQUNuRSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssS0FBSyxJQUFJLFFBQVEsS0FBSyxhQUFhLElBQUksUUFBUSxLQUFLLGNBQWMsQ0FBQyxFQUFFO1FBQ3pJLE9BQU8sK0JBQStCLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDakQ7SUFFRCxnRUFBZ0U7SUFDaEUsUUFBUSxPQUFPLENBQUMsU0FBUyxFQUFFO1FBQ3pCLEtBQUssU0FBUyxDQUFDLE9BQU87WUFDcEIsT0FBTyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxLQUFLLFNBQVMsQ0FBQyxJQUFJO1lBQ2pCLE9BQU8sbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsS0FBSyxTQUFTLENBQUMsT0FBTztZQUNwQixPQUFPLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLEtBQUssU0FBUyxDQUFDLE9BQU87WUFDcEIsT0FBTyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDdEIsS0FBSyxTQUFTLENBQUMsVUFBVTtZQUN2QixPQUFPLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUMzQixLQUFLLFNBQVMsQ0FBQyxlQUFlO1lBQzVCLE9BQU8sMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsS0FBSyxTQUFTLENBQUMsTUFBTTtZQUNuQixPQUFPLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN0QjtZQUNFLE9BQU8scUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbkZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vYm9vbGVhbkZpbHRlckNvbmRpdGlvbic7XHJcbmltcG9ydCB7IGRhdGVGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL2RhdGVGaWx0ZXJDb25kaXRpb24nO1xyXG5pbXBvcnQgeyBkYXRlSXNvRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9kYXRlSXNvRmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgZGF0ZVVzU2hvcnRGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL2RhdGVVc1Nob3J0RmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgZGF0ZVVzRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9kYXRlVXNGaWx0ZXJDb25kaXRpb24nO1xyXG5pbXBvcnQgeyBkYXRlVXRjRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9kYXRlVXRjRmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgRmlsdGVyQ29uZGl0aW9uT3B0aW9uIH0gZnJvbSAnLi8uLi9tb2RlbHMvZmlsdGVyQ29uZGl0aW9uT3B0aW9uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4uL21vZGVscy9maWx0ZXJDb25kaXRpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgY29sbGVjdGlvblNlYXJjaEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vY29sbGVjdGlvblNlYXJjaEZpbHRlckNvbmRpdGlvbic7XHJcbmltcG9ydCB7IG51bWJlckZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vbnVtYmVyRmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgc3RyaW5nRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9zdHJpbmdGaWx0ZXJDb25kaXRpb24nO1xyXG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVNYXBwZWRDb25kaXRpb246IEZpbHRlckNvbmRpdGlvbiA9IChvcHRpb25zOiBGaWx0ZXJDb25kaXRpb25PcHRpb24pID0+IHtcclxuICAvLyB3aGVuIHVzaW5nIGEgbXVsdGktc2VsZWN0ICgnSU4nIG9wZXJhdG9yKSB3ZSB3aWxsIG5vdCB1c2UgdGhlIGZpZWxkIHR5cGUgYnV0IGluc3RlYWQgZ28gZGlyZWN0bHkgd2l0aCBhIGNvbGxlY3Rpb24gc2VhcmNoXHJcbiAgY29uc3Qgb3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yICYmIG9wdGlvbnMub3BlcmF0b3IudG9VcHBlckNhc2UoKTtcclxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9wZXJhdG9yICYmIChvcGVyYXRvciA9PT0gJ0lOJyB8fCBvcGVyYXRvciA9PT0gJ05JTicgfHwgb3BlcmF0b3IgPT09ICdJTl9DT05UQUlOUycgfHwgb3BlcmF0b3IgPT09ICdOSU5fQ09OVEFJTlMnKSkge1xyXG4gICAgcmV0dXJuIGNvbGxlY3Rpb25TZWFyY2hGaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvLyBleGVjdXRlIHRoZSBtYXBwZWQgdHlwZSwgb3IgZGVmYXVsdCB0byBTdHJpbmcgY29uZGl0aW9uIGNoZWNrXHJcbiAgc3dpdGNoIChvcHRpb25zLmZpZWxkVHlwZSkge1xyXG4gICAgY2FzZSBGaWVsZFR5cGUuYm9vbGVhbjpcclxuICAgICAgcmV0dXJuIGJvb2xlYW5GaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlOlxyXG4gICAgICByZXR1cm4gZGF0ZUZpbHRlckNvbmRpdGlvbihvcHRpb25zKTtcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVVdGM6XHJcbiAgICAgIHJldHVybiBkYXRlVXRjRmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMpO1xyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZUlzbzpcclxuICAgICAgcmV0dXJuIGRhdGVJc29GaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVXM6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzOlxyXG4gICAgICByZXR1cm4gZGF0ZVVzRmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMpO1xyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVVzU2hvcnQ6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzU2hvcnQ6XHJcbiAgICAgIHJldHVybiBkYXRlVXNTaG9ydEZpbHRlckNvbmRpdGlvbihvcHRpb25zKTtcclxuICAgIGNhc2UgRmllbGRUeXBlLm51bWJlcjpcclxuICAgICAgcmV0dXJuIG51bWJlckZpbHRlckNvbmRpdGlvbihvcHRpb25zKTtcclxuICAgIGNhc2UgRmllbGRUeXBlLnN0cmluZzpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdHJpbmdGaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgfVxyXG59O1xyXG4iXX0=